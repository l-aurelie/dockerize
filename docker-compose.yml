version: "3.8"
#.les differents services nest, react, postgres
services:
  react:
    #.build l'image a partir du fichier name Dockerfile situe dans le dossier context
    build:
      dockerfile: Dockerfile
      context: ./front/
    #.pour changer le port par defaut ou se lance react
    environment:
      - PORT=4200
    #.portmachine:portcontainer
    ports:
      - 4200:4200
    #.pour resoudre "No command specified" sur certains ordis (sinon direct dans dockerfile)
    #.pour debugger
    #command: ["tail", "-f", "/dev/null"]

    #.PROD-MODE--
    #command: sh -c "cd /usr/src/app && serve -s build"
    #.DEV-MODE--
    command: sh -c "cd /usr/src/app && npm start"
    #.Pour que le code en local puisse s'actualiser en temps reel dans le container
    #.dossierlocal:dossiercontainer
    volumes:
      - ./front:/usr/src/app
    #.-----

  nest:
    build:
      dockerfile: Dockerfile
      context: ./back/
    depends_on:
      postgres:
      #.permet d'attendre que la db soit lancee
        condition: service_healthy
    #environment:
      #.l'adresse pour acceder a la db
      #.dialect+driver://username:password@host:port/database
      #DATABASE_URL: postgres://user:password@postgres:5432/db
      #NODE_ENV: development ou production (a etudier)
    env_file:
      - .env
    ports:
      - 3000:3000
    #.command : pour resoudre "No command specified" sur certains ordis (sinon direct dans dockerfile)
    #.pour debugger
    #command: ["tail", "-f", "/dev/null"]
    
    #.PROD-MODE--
    #command: sh -c "cd /usr/src/app && npm run start:prod"
    #.DEV-MODE--
    command: sh -c "cd /usr/src/app && npm run start:dev"
    volumes:
      - ./back:/usr/src/app
    #.-----
  
  postgres:
    #.run a partir de l'image donnee
    image: postgres:latest
    #.les variable qui vont etre passees a postgres : user/password/database cree
    #environment:
    #  POSTGRES_USER: user
    #  POSTGRES_PASSWORD: password
    #  POSTGRES_DB: db
    #.Pour ne pas laisser les variable en dur dans le dockerfile
    env_file:
      - .env
    volumes:
      - ./DB:/var/lib/postgresql/data
      #.if mount dont work, rename anonyme volume (create in postgres official img)
      #- db_data:/var/lib/postgresql/data
    ports: 
      - 3500:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 5s
      timeout: 5s
      retries: 5

#.to name anonyme volume from Postgres official dockerfile (stored in /var/lib/docker/volumes/)      
#volumes:
#  db_data: